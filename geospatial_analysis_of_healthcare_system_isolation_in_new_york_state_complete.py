# -*- coding: utf-8 -*-
"""Geospatial Analysis of Healthcare System Isolation in New York State Complete.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/171buQArM4MhHQxGtG1gAsP3RdWeu5h4G
"""

################################################################
# Geospatial Analysis of Healthcare System Isolation in New York State
# Brandon Bedenbender, Associate Professor, Doctoral Candidate, MBA
################################################################

# Code accompanies paper: Geospatial Analysis of Healthcare System Isolation in New York State

# US Hospital Information is contained in hospita_data_geo.csv
# Canadian Hospital Information is contained in updated_hospital_cordinates_clean.csv
# Boundary Information is contained in NYS_Civil_Boundaries

# Information collected reflects the 2020 reports; however, reporting times differ between agencies.

#Figure 1 - All New York Health Care Facilities with Emergency Services

import pandas as pd
import folium
import geopandas as gpd
from shapely.geometry import Point

# File path
us_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/hospita_data_geo.csv'


# Load US hospital data
us_hospital_df = pd.read_csv(us_hospital_file_path)

# Filter for New York hospitals
ny_hospitals = us_hospital_df[us_hospital_df['State'] == 'NY']

# Create GeoDataFrame of New York hospitals
ny_hosp_gdf = gpd.GeoDataFrame(
    ny_hospitals,
    geometry=[Point(lng, lat) for lat, lng in zip(ny_hospitals['lat'], ny_hospitals['lng'])],
    crs="EPSG:4326"
)

############################################
# Create Interactive Map
############################################
# Create a Folium map centered around New York State
ny_map = folium.Map(location=[43.2994, -74.2179], zoom_start=7)

# Add hospital markers to the map
for _, hospital in ny_hosp_gdf.iterrows():
    folium.Marker(
        location=[hospital.geometry.y, hospital.geometry.x],
        popup=(
            f"<b>Facility Name:</b> {hospital['Facility Name']}<br>"
            f"<b>County:</b> {hospital['County']}<br>"
            f"<b>Emergency Services:</b> {hospital['Emergency Services']}"
        ),
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(ny_map)

# Save the map to an HTML file
map_file_path = 'new_york_hospitals_map.html'
ny_map.save(map_file_path)

# Display the map
ny_map

#Figure 2 - Spatial Coverage Area of Ten Most Isolated Healthcare Facilities in New York State by Radii Distance to Nearest Facility

import pandas as pd
import folium
from geopy.distance import geodesic

# Load hospital data
us_hospital_file_path = '/content/hospita_data_geo.csv'
canadian_hospital_file_path = '/content/updated_hospital_coordinates_clean.csv'

# Load US hospital data
us_hospital_df = pd.read_csv(us_hospital_file_path)

# Load Canadian hospital data
canadian_hospital_df = pd.read_csv(canadian_hospital_file_path, encoding='latin1')

# Rename Canadian hospital columns to align with US dataset
canadian_hospital_df.rename(columns={
    'province territory': 'State',
    'Latitude': 'lat',
    'Longitude': 'lng',
    'hospital name': 'Hospital Name',
    'type of hospital*': 'Hospital Type',
    'teaching status': 'Teaching Status',
    'other acute': 'Emergency Services'
}, inplace=True)

# Add a column to distinguish Canadian hospitals
canadian_hospital_df['Country'] = 'Canada'

# Filter for relevant provinces in Canada (bordering New York)
relevant_provinces = ['Ontario', 'Quebec', 'New Brunswick']
canadian_hospital_df = canadian_hospital_df[canadian_hospital_df['State'].isin(relevant_provinces)]

# Fill missing Emergency Services data with 'No' for consistency
canadian_hospital_df['Emergency Services'] = canadian_hospital_df['Emergency Services'].fillna('No')

# Add a column to distinguish US hospitals
us_hospital_df['Country'] = 'USA'

# Merge US and Canadian hospitals
hospital_df = pd.concat([us_hospital_df, canadian_hospital_df], ignore_index=True)

# Filter for relevant states and provinces (New York and surroundings)
relevant_states = ['NY', 'CT', 'NJ', 'PA', 'VT', 'Ontario', 'Quebec', 'New Brunswick']
relevant_hospitals = hospital_df[hospital_df['State'].isin(relevant_states)]

# Filter for hospitals with emergency services
emergency_hospitals = relevant_hospitals[relevant_hospitals['Emergency Services'] == 'Yes']

# Separate New York hospitals from others
ny_hospitals = emergency_hospitals[emergency_hospitals['State'] == 'NY']

# Calculate top 10 isolated hospitals based on the furthest distance to the nearest neighbor
def calculate_min_distances(hospitals):
    distances = []
    for i, hospital1 in hospitals.iterrows():
        hospital1_coords = (hospital1['lat'], hospital1['lng'])
        min_distance = float('inf')
        for j, hospital2 in hospitals.iterrows():
            if i == j:
                continue
            hospital2_coords = (hospital2['lat'], hospital2['lng'])
            distance = geodesic(hospital1_coords, hospital2_coords).miles
            if distance < min_distance:
                min_distance = distance
        distances.append((hospital1['Hospital Name'], hospital1['lat'], hospital1['lng'], min_distance))
    return sorted(distances, key=lambda x: x[3], reverse=True)

isolated_hospitals = calculate_min_distances(ny_hospitals)[:10]

# Assign non-overlapping radii for isolated hospitals
def assign_non_overlapping_radii(hospitals):
    radii = []
    for i, hospital in enumerate(hospitals):
        min_radius = hospital[3] / 2  # Half the distance to the nearest neighbor
        radii.append((hospital[0], hospital[1], hospital[2], min_radius))
    return radii

hospital_radii = assign_non_overlapping_radii(isolated_hospitals)

# Create a map centered around New York
ny_map = folium.Map(location=[40.7128, -74.0060], zoom_start=6)

# Add hospital markers and non-overlapping coverage areas
for hospital in hospital_radii:
    hospital_name, lat, lng, radius = hospital
    # Add hospital marker
    folium.Marker(
        location=[lat, lng],
        popup=f"{hospital_name} - Coverage Radius: {radius:.2f} miles",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(ny_map)

    # Add circular coverage area
    folium.Circle(
        location=[lat, lng],
        radius=radius * 1609.34,  # Convert miles to meters for Folium
        color='red',
        fill=True,
        fill_opacity=0.4
    ).add_to(ny_map)

# Save the map to an HTML file
ny_map.save('isolated_hospital_coverage.html')

# Display the map (optional in notebook environments)
ny_map

#Figure 3 - Radius of Non-overlapping Coverage Area of New York State Hospitals

import pandas as pd
import matplotlib.pyplot as plt
from geopy.distance import geodesic


# Plot coverage areas as a bar graph without hospital names
plt.figure(figsize=(16, 10))
plt.barh(
    range(len(coverage_df)),  # Use index instead of hospital names
    coverage_df['Coverage Area (miles)'],
    color='skyblue'
)

# Customize the axes
plt.xlabel('Distance to Nearest Coverage Area (miles)', fontsize=14)
plt.ylabel('Hospitals (indexed)', fontsize=14)
plt.title('Radius of Coverage Area of Hospitals', fontsize=16)




# Invert y-axis for better readability
plt.gca().invert_yaxis()

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

# Optional: Save the bar chart as an image
plt.savefig('hospital_coverage_area_no_labels.png')

# Generation of List of Ranked Radii List for Table 1

import pandas as pd
from geopy.distance import geodesic

# Load hospital data
us_hospital_file_path = '/content/hospita_data_geo.csv'
canadian_hospital_file_path = '/content/updated_hospital_coordinates_clean.csv'

# Load US hospital data
us_hospital_df = pd.read_csv(us_hospital_file_path)

# Load Canadian hospital data
canadian_hospital_df = pd.read_csv(canadian_hospital_file_path, encoding='latin1')

# Rename Canadian hospital columns to align with US dataset
canadian_hospital_df.rename(columns={
    'province territory': 'State',
    'Latitude': 'lat',
    'Longitude': 'lng',
    'hospital name': 'Hospital Name',
    'type of hospital*': 'Hospital Type',
    'teaching status': 'Teaching Status',
    'other acute': 'Emergency Services'
}, inplace=True)

# Add a column to distinguish Canadian hospitals
canadian_hospital_df['Country'] = 'Canada'

# Filter for relevant provinces in Canada (bordering New York)
relevant_provinces = ['Ontario', 'Quebec', 'New Brunswick']
canadian_hospital_df = canadian_hospital_df[canadian_hospital_df['State'].isin(relevant_provinces)]

# Fill missing Emergency Services data with 'No' for consistency
canadian_hospital_df['Emergency Services'] = canadian_hospital_df['Emergency Services'].fillna('No')

# Add a column to distinguish US hospitals
us_hospital_df['Country'] = 'USA'

# Merge US and Canadian hospitals
hospital_df = pd.concat([us_hospital_df, canadian_hospital_df], ignore_index=True)

# Filter for relevant states and provinces (New York and surroundings)
relevant_states = ['NY', 'CT', 'NJ', 'PA', 'VT', 'Ontario', 'Quebec', 'New Brunswick']
relevant_hospitals = hospital_df[hospital_df['State'].isin(relevant_states)]

# Filter for hospitals with emergency services
emergency_hospitals = relevant_hospitals[relevant_hospitals['Emergency Services'] == 'Yes']

# Separate New York hospitals from others
ny_hospitals = emergency_hospitals[emergency_hospitals['State'] == 'NY']

# Calculate coverage area for all hospitals
def calculate_coverage_areas(hospitals):
    coverage_areas = []
    for i, hospital1 in hospitals.iterrows():
        hospital1_coords = (hospital1['lat'], hospital1['lng'])
        min_distance = float('inf')
        for j, hospital2 in hospitals.iterrows():
            if i == j:
                continue
            hospital2_coords = (hospital2['lat'], hospital2['lng'])
            distance = geodesic(hospital1_coords, hospital2_coords).miles
            if distance < min_distance:
                min_distance = distance
        coverage_areas.append((hospital1['Hospital Name'], min_distance))
    return coverage_areas

# Calculate coverage areas
coverage_areas = calculate_coverage_areas(emergency_hospitals)

# Convert to DataFrame for listing
coverage_df = pd.DataFrame(coverage_areas, columns=['Hospital Name', 'Coverage Area (miles)'])

# Sort DataFrame for better visualization
coverage_df = coverage_df.sort_values(by='Coverage Area (miles)', ascending=False)

# Print hospital names and coverage areas as a list
hospital_list = coverage_df.to_string(index=False, header=True)
print(hospital_list)

# Save the hospital list to a text file (optional)
with open('hospital_coverage_list.txt', 'w') as file:
    file.write(hospital_list)

#Figure 4 - . Polygon Catchment Area of Healthcare Facilities with Emergency Access in New York State. The Top Ten Largest Catchment Areas are Red


import pandas as pd
import folium
import geopandas as gpd
from shapely.geometry import Point, Polygon
from scipy.spatial import Voronoi
import matplotlib.pyplot as plt
import numpy as np
from geopy.distance import geodesic

# Update these file paths as needed
us_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/hospita_data_geo.csv'
canadian_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/updated_hospital_coordinates_clean.csv'
shoreline_shapefile_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/NYS_Civil_Boundaries/State_Shoreline.shp'

# Load US hospital data
us_hospital_df = pd.read_csv(us_hospital_file_path)

# Load Canadian hospital data
canadian_hospital_df = pd.read_csv(canadian_hospital_file_path, encoding='latin1')

# Rename Canadian hospital columns to align with US dataset
canadian_hospital_df.rename(columns={
    'province territory': 'State',
    'Latitude': 'lat',
    'Longitude': 'lng',
    'hospital name': 'Hospital Name',
    'type of hospital*': 'Hospital Type',
    'teaching status': 'Teaching Status',
    'other acute': 'Emergency Services'
}, inplace=True)

# Add a column to distinguish Canadian hospitals
canadian_hospital_df['Country'] = 'Canada'

# Filter for relevant provinces in Canada (bordering New York)
relevant_provinces = ['Ontario', 'Quebec', 'New Brunswick']
canadian_hospital_df = canadian_hospital_df[canadian_hospital_df['State'].isin(relevant_provinces)]

# Fill missing Emergency Services data with 'No'
canadian_hospital_df['Emergency Services'] = canadian_hospital_df['Emergency Services'].fillna('No')

# Add a column to distinguish US hospitals
us_hospital_df['Country'] = 'USA'

# Merge US and Canadian hospitals
hospital_df = pd.concat([us_hospital_df, canadian_hospital_df], ignore_index=True)

# Filter for relevant states and provinces
relevant_states = ['NY', 'CT', 'NJ', 'PA', 'VT', 'MA', 'Ontario', 'Quebec', 'New Brunswick']
relevant_hospitals = hospital_df[hospital_df['State'].isin(relevant_states)]

# Filter for hospitals with emergency services
emergency_hospitals = relevant_hospitals[relevant_hospitals['Emergency Services'] == 'Yes']

# Convert hospital coordinates to GeoDataFrame for all emergency hospitals in the region
all_hosp_gdf = gpd.GeoDataFrame(
    emergency_hospitals,
    geometry=[Point(lng, lat) for lat, lng in zip(emergency_hospitals['lat'], emergency_hospitals['lng'])],
    crs="EPSG:4326"
)

# Read the shoreline shapefile
shoreline_gdf = gpd.read_file(shoreline_shapefile_path).to_crs(epsg=4326)

# Project to a suitable CRS for area calculations (Web Mercator)
proj_crs = "EPSG:3857"
all_hosp_proj = all_hosp_gdf.to_crs(proj_crs)
shoreline_proj = shoreline_gdf.to_crs(proj_crs)

# Extract projected coordinates
coords = np.array([(geom.x, geom.y) for geom in all_hosp_proj.geometry])

# Compute Voronoi
vor = Voronoi(coords)

# Construct Voronoi polygons
hospital_voronoi = []
for point_idx, region_idx in enumerate(vor.point_region):
    region = vor.regions[region_idx]
    if region and -1 not in region:
        polygon = Polygon([vor.vertices[i] for i in region])
    else:
        polygon = None
    hospital_voronoi.append((all_hosp_proj.iloc[point_idx], polygon))

# Create a GeoDataFrame of Voronoi polygons associated with each hospital
vor_gdf = gpd.GeoDataFrame([
    {
        'Hospital Name': h['Hospital Name'],
        'State': h['State'],
        'Country': h['Country'],
        'Isolation Dist': 'N/A',  # Not needed now
        'geometry': p
    }
    for h, p in hospital_voronoi if p is not None
], crs=proj_crs)

# Clip Voronoi polygons to the shoreline
clipped_vor_gdf = gpd.overlay(vor_gdf, shoreline_proj, how='intersection')

# Compute area
clipped_vor_gdf['Area_m2'] = clipped_vor_gdf.geometry.area

# Rank by coverage area (1 = largest area)
clipped_vor_gdf['Coverage Rank'] = clipped_vor_gdf['Area_m2'].rank(method='dense', ascending=False).astype(int)

# Reproject back to EPSG:4326 for Folium display
final_vor_gdf = clipped_vor_gdf.to_crs(epsg=4326)

# Determine top 10 largest coverage areas
top_10 = final_vor_gdf[final_vor_gdf['Coverage Rank'] <= 15]

#########################################
# Plotting results on a Folium map
#########################################

ny_map = folium.Map(location=[40.7128, -74.0060], zoom_start=6)

for idx, row in final_vor_gdf.iterrows():
    geom = row.geometry
    popup_text = (f"Hospital: {row['Hospital Name']}<br>"
                  f"State: {row['State']}<br>"
                  f"Area: {row['Area_m2']:.2f} m²<br>"
                  f"Rank by Coverage: {row['Coverage Rank']}")

    # Determine color based on rank
    # Top 10 largest areas in red, others in green
    color = 'red' if row['Coverage Rank'] <= 15 else 'green'

    if geom.geom_type == 'Polygon':
        # Single polygon
        poly_coords = [(coord[1], coord[0]) for coord in np.array(geom.exterior.coords)]
        folium.Polygon(
            locations=poly_coords,
            color=color,
            weight=2,
            fill=True,
            fill_opacity=0.4,
            popup=popup_text
        ).add_to(ny_map)

    elif geom.geom_type == 'MultiPolygon':
        # Multiple polygons
        for poly in geom.geoms:
            poly_coords = [(coord[1], coord[0]) for coord in np.array(poly.exterior.coords)]
            folium.Polygon(
                locations=poly_coords,
                color=color,
                weight=2,
                fill=True,
                fill_opacity=0.4,
                popup=popup_text
            ).add_to(ny_map)

# Add hospital markers
for i, hospital in all_hosp_gdf.iterrows():
    folium.Marker(
        location=[hospital.geometry.y, hospital.geometry.x],
        popup=f"{hospital['Hospital Name']}<br>State: {hospital['State']}",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(ny_map)

# Save and display the map
ny_map.save('all_hospital_catchment_areas.html')
ny_map

#Figure 5 - Calculated Square Miles of Healthcare Facilities Catchment in New York State


# Mount Google Drive (only needed if using Google Colab)
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import folium
import geopandas as gpd
from shapely.geometry import Point, Polygon
from scipy.spatial import Voronoi
import matplotlib.pyplot as plt
import numpy as np
from geopy.distance import geodesic

# Update these file paths as needed
us_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/hospita_data_geo.csv'
canadian_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/updated_hospital_coordinates_clean.csv'
shoreline_shapefile_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/NYS_Civil_Boundaries/State_Shoreline.shp'

# Load US hospital data
us_hospital_df = pd.read_csv(us_hospital_file_path)

# Load Canadian hospital data
canadian_hospital_df = pd.read_csv(canadian_hospital_file_path, encoding='latin1')

# Rename Canadian hospital columns to align with US dataset
canadian_hospital_df.rename(columns={
    'province territory': 'State',
    'Latitude': 'lat',
    'Longitude': 'lng',
    'hospital name': 'Hospital Name',
    'type of hospital*': 'Hospital Type',
    'teaching status': 'Teaching Status',
    'other acute': 'Emergency Services'
}, inplace=True)

# Add a column to distinguish Canadian hospitals
canadian_hospital_df['Country'] = 'Canada'

# Filter for relevant provinces in Canada (bordering New York)
relevant_provinces = ['Ontario', 'Quebec', 'New Brunswick']
canadian_hospital_df = canadian_hospital_df[canadian_hospital_df['State'].isin(relevant_provinces)]

# Fill missing Emergency Services data with 'No'
canadian_hospital_df['Emergency Services'] = canadian_hospital_df['Emergency Services'].fillna('No')

# Add a column to distinguish US hospitals
us_hospital_df['Country'] = 'USA'

# Merge US and Canadian hospitals
hospital_df = pd.concat([us_hospital_df, canadian_hospital_df], ignore_index=True)

# Filter for relevant states and provinces
relevant_states = ['NY', 'CT', 'NJ', 'PA', 'VT', 'MA', 'Ontario', 'Quebec', 'New Brunswick']
relevant_hospitals = hospital_df[hospital_df['State'].isin(relevant_states)]

# Filter for hospitals with emergency services
emergency_hospitals = relevant_hospitals[relevant_hospitals['Emergency Services'] == 'Yes']

# Convert hospital coordinates to GeoDataFrame for all emergency hospitals in the region
all_hosp_gdf = gpd.GeoDataFrame(
    emergency_hospitals,
    geometry=[Point(lng, lat) for lat, lng in zip(emergency_hospitals['lat'], emergency_hospitals['lng'])],
    crs="EPSG:4326"
)

# Read the shoreline shapefile
shoreline_gdf = gpd.read_file(shoreline_shapefile_path).to_crs(epsg=4326)

# Project to a suitable CRS for area calculations (Web Mercator)
proj_crs = "EPSG:3857"
all_hosp_proj = all_hosp_gdf.to_crs(proj_crs)
shoreline_proj = shoreline_gdf.to_crs(proj_crs)

# Extract projected coordinates
coords = np.array([(geom.x, geom.y) for geom in all_hosp_proj.geometry])

# Compute Voronoi
vor = Voronoi(coords)

# Construct Voronoi polygons
hospital_voronoi = []
for point_idx, region_idx in enumerate(vor.point_region):
    region = vor.regions[region_idx]
    if region and -1 not in region:
        polygon = Polygon([vor.vertices[i] for i in region])
    else:
        polygon = None
    hospital_voronoi.append((all_hosp_proj.iloc[point_idx], polygon))

# Create a GeoDataFrame of Voronoi polygons associated with each hospital
vor_gdf = gpd.GeoDataFrame([
    {
        'Hospital Name': h['Hospital Name'],
        'State': h['State'],
        'Country': h['Country'],
        'Isolation Dist': 'N/A',  # Not needed now
        'geometry': p
    }
    for h, p in hospital_voronoi if p is not None
], crs=proj_crs)

# Clip Voronoi polygons to the shoreline
clipped_vor_gdf = gpd.overlay(vor_gdf, shoreline_proj, how='intersection')

# Compute area in m²
clipped_vor_gdf['Area_m2'] = clipped_vor_gdf.geometry.area

# Convert area to square miles: 1 sq mile = 2,589,988.110336 sq meters approx
sq_m_per_sq_mi = 2589988.110336
clipped_vor_gdf['Area_sq_mi'] = clipped_vor_gdf['Area_m2'] / sq_m_per_sq_mi

# Rank by coverage area (1 = largest area)
clipped_vor_gdf['Coverage Rank'] = clipped_vor_gdf['Area_sq_mi'].rank(method='dense', ascending=False).astype(int)

# Reproject back to EPSG:4326 for Folium display
final_vor_gdf = clipped_vor_gdf.to_crs(epsg=4326)

# Determine top 15 largest coverage areas
top_15 = final_vor_gdf[final_vor_gdf['Coverage Rank'] <= 15]

#########################################
# Plotting results on a Folium map
#########################################

ny_map = folium.Map(location=[40.7128, -74.0060], zoom_start=6)

for idx, row in final_vor_gdf.iterrows():
    geom = row.geometry
    popup_text = (f"Hospital: {row['Hospital Name']}<br>"
                  f"State: {row['State']}<br>"
                  f"Area: {row['Area_sq_mi']:.2f} sq. miles<br>"
                  f"Rank by Coverage: {row['Coverage Rank']}")

    # Top 15 areas as yellow, others in green
    color = 'yellow' if row['Coverage Rank'] <= 15 else 'green'

    if geom.geom_type == 'Polygon':
        poly_coords = [(coord[1], coord[0]) for coord in np.array(geom.exterior.coords)]
        folium.Polygon(
            locations=poly_coords,
            color=color,
            weight=2,
            fill=True,
            fill_opacity=0.4,
            popup=popup_text
        ).add_to(ny_map)

    elif geom.geom_type == 'MultiPolygon':
        for poly in geom.geoms:
            poly_coords = [(coord[1], coord[0]) for coord in np.array(poly.exterior.coords)]
            folium.Polygon(
                locations=poly_coords,
                color=color,
                weight=2,
                fill=True,
                fill_opacity=0.4,
                popup=popup_text
            ).add_to(ny_map)

# Add hospital markers
for i, hospital in all_hosp_gdf.iterrows():
    folium.Marker(
        location=[hospital.geometry.y, hospital.geometry.x],
        popup=f"{hospital['Hospital Name']}<br>State: {hospital['State']}",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(ny_map)

ny_map.save('all_hospital_catchment_areas.html')

#########################################
# Plot a Graph of Coverage Areas by Hospital
#########################################

# Sort by area descending
sorted_vor = final_vor_gdf.sort_values(by='Area_sq_mi', ascending=False)

# Extract names and areas
hospital_names = sorted_vor['Hospital Name'].values
areas_sq_mi = sorted_vor['Area_sq_mi'].values

# Identify top 15 indices
top_15_indices = sorted_vor['Coverage Rank'] <= 15

# Create a bar plot
plt.figure(figsize=(12, 8))
bars = plt.bar(range(len(areas_sq_mi)), areas_sq_mi, color='blue')

# Highlight top 15 bars in red
for i, bar in enumerate(bars):
    if top_15_indices.iloc[i]:
        bar.set_color('red')

plt.xlabel('Hospitals (Sorted by Coverage Area)')
plt.ylabel('Coverage Area (sq. miles)')
plt.title('Hospital Catchment Areas by Coverage Area')

plt.tight_layout()
plt.show()

# Figure 6 - Top 15 Catchment by Coverage Area & List Generation with Ranking

import pandas as pd
import geopandas as gpd
from shapely.geometry import Point, Polygon
from scipy.spatial import Voronoi
import matplotlib.pyplot as plt
import numpy as np
from geopy.distance import geodesic
import folium

# Example file paths (update to your own)
us_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/hospita_data_geo.csv'
canadian_hospital_file_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/updated_hospital_coordinates_clean.csv'
shoreline_shapefile_path = '/content/drive/MyDrive/Final Research Project/Hospital Data/NYS_Civil_Boundaries/State_Shoreline.shp'

# Read US hospitals
us_hospital_df = pd.read_csv(us_hospital_file_path, encoding='utf-8')
# Check if the column for names is "Hospital Name" or something else:
print("US hospital columns:", us_hospital_df.columns)

us_hospital_df.rename(columns={"Facility Name": "Hospital Name"}, inplace=True)

# Read Canadian hospitals
canadian_hospital_df = pd.read_csv(canadian_hospital_file_path, encoding='latin1')
print("Canadian hospital columns:", canadian_hospital_df.columns)

# Rename Canadian columns
canadian_hospital_df.rename(columns={
    'province territory': 'State',
    'Latitude': 'lat',
    'Longitude': 'lng',
    'hospital name': 'Hospital Name',
    'type of hospital*': 'Hospital Type',
    'teaching status': 'Teaching Status',
    'other acute': 'Emergency Services'
}, inplace=True)


print("\n[After rename] US hospital columns:", us_hospital_df.columns)
print("[After rename] Canadian hospital columns:", canadian_hospital_df.columns)

# Fill missing hospital names with a placeholder if needed
us_hospital_df['Hospital Name'] = us_hospital_df['Hospital Name'].fillna('Unknown Facility')
canadian_hospital_df['Hospital Name'] = canadian_hospital_df['Hospital Name'].fillna('Unknown Facility')

# Distinguish countries
us_hospital_df['Country'] = 'USA'
canadian_hospital_df['Country'] = 'Canada'


relevant_provinces = ['Ontario', 'Quebec', 'New Brunswick']
canadian_hospital_df = canadian_hospital_df[canadian_hospital_df['State'].isin(relevant_provinces)]
canadian_hospital_df['Emergency Services'] = canadian_hospital_df['Emergency Services'].fillna('No')

relevant_states = ['NY', 'CT', 'NJ', 'PA', 'VT', 'MA', 'Ontario', 'Quebec', 'New Brunswick']
# Merge US and Canadian hospitals
hospital_df = pd.concat([us_hospital_df, canadian_hospital_df], ignore_index=True)
relevant_hospitals = hospital_df[hospital_df['State'].isin(relevant_states)]

# Filter for hospitals with emergency services
emergency_hospitals = relevant_hospitals[relevant_hospitals['Emergency Services'] == 'Yes']

###################################################
# Proceed with Voronoi and plotting
###################################################
# Convert to GeoDataFrame
all_hosp_gdf = gpd.GeoDataFrame(
    emergency_hospitals,
    geometry=[Point(lng, lat) for lat, lng in zip(emergency_hospitals['lat'], emergency_hospitals['lng'])],
    crs="EPSG:4326"
)

shoreline_gdf = gpd.read_file(shoreline_shapefile_path).to_crs(epsg=4326)
proj_crs = "EPSG:3857"
all_hosp_proj = all_hosp_gdf.to_crs(proj_crs)
shoreline_proj = shoreline_gdf.to_crs(proj_crs)

coords = np.array([(geom.x, geom.y) for geom in all_hosp_proj.geometry])
vor = Voronoi(coords)

hospital_voronoi = []
for point_idx, region_idx in enumerate(vor.point_region):
    region = vor.regions[region_idx]
    if region and -1 not in region:
        polygon = Polygon([vor.vertices[i] for i in region])
    else:
        polygon = None
    hospital_voronoi.append((all_hosp_proj.iloc[point_idx], polygon))

vor_gdf = gpd.GeoDataFrame([
    {
        'Hospital Name': h['Hospital Name'],
        'State': h['State'],
        'Country': h['Country'],
        'geometry': p
    }
    for h, p in hospital_voronoi if p is not None
], crs=proj_crs)

clipped_vor_gdf = gpd.overlay(vor_gdf, shoreline_proj, how='intersection')

clipped_vor_gdf['Area_m2'] = clipped_vor_gdf.geometry.area
sq_m_per_sq_mi = 2589988.110336
clipped_vor_gdf['Area_sq_mi'] = clipped_vor_gdf['Area_m2'] / sq_m_per_sq_mi
clipped_vor_gdf['Coverage Rank'] = clipped_vor_gdf['Area_sq_mi'].rank(method='dense', ascending=False).astype(int)

final_vor_gdf = clipped_vor_gdf.to_crs(epsg=4326)
top_15 = final_vor_gdf[final_vor_gdf['Coverage Rank'] <= 15]

###################################################
# Print the top 15 facilities by Area
###################################################
print("\nTop 15 Hospitals by Coverage Area (square miles):")
top_15_sorted = top_15.sort_values('Area_sq_mi', ascending=False)
for idx, row in top_15_sorted.iterrows():
    print(f"Rank {row['Coverage Rank']} | {row['Hospital Name']} ({row['State']}) - {row['Area_sq_mi']:.2f} sq. miles")

###################################################
# Folium map and bar plot code (unchanged from previous figure)
###################################################
ny_map = folium.Map(location=[40.7128, -74.0060], zoom_start=6)

for idx, row in final_vor_gdf.iterrows():
    geom = row.geometry
    popup_text = (
        f"Hospital: {row['Hospital Name']}<br>"
        f"State: {row['State']}<br>"
        f"Area: {row['Area_sq_mi']:.2f} sq. miles<br>"
        f"Rank by Coverage: {row['Coverage Rank']}"
    )
    color = 'yellow' if row['Coverage Rank'] <= 15 else 'green'

    if geom.geom_type == 'Polygon':
        poly_coords = [(coord[1], coord[0]) for coord in np.array(geom.exterior.coords)]
        folium.Polygon(
            locations=poly_coords,
            color=color,
            weight=2,
            fill=True,
            fill_opacity=0.4,
            popup=popup_text
        ).add_to(ny_map)

    elif geom.geom_type == 'MultiPolygon':
        for poly in geom.geoms:
            poly_coords = [(coord[1], coord[0]) for coord in np.array(poly.exterior.coords)]
            folium.Polygon(
                locations=poly_coords,
                color=color,
                weight=2,
                fill=True,
                fill_opacity=0.4,
                popup=popup_text
            ).add_to(ny_map)

for i, hospital in all_hosp_gdf.iterrows():
    folium.Marker(
        location=[hospital.geometry.y, hospital.geometry.x],
        popup=f"{hospital['Hospital Name']}<br>State: {hospital['State']}",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(ny_map)

ny_map.save('all_hospital_catchment_areas.html')

# Figure 6: Bar Graph for Top 15
plt.figure(figsize=(12, 8))
bars = plt.bar(range(len(top_15_sorted)), top_15_sorted['Area_sq_mi'], color='red')
plt.xticks(range(len(top_15_sorted)), top_15_sorted['Hospital Name'], rotation=90)

plt.ylabel('Coverage Area (sq. miles)')
plt.title('Top 15 Hospital Catchment Areas by Coverage Area')
plt.tight_layout()
plt.show()