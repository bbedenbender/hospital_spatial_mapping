# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B7dO_RAVcqulWlupxjlQOqhkAJ8abodX
"""

import pandas as pd
import folium
from geopy.distance import geodesic

# Load hospital data
us_hospital_file_path = '/content/hospita_data_geo.csv'
canadian_hospital_file_path = '/content/updated_hospital_coordinates_clean.csv'

# Load US hospital data
us_hospital_df = pd.read_csv(us_hospital_file_path)

# Load Canadian hospital data
canadian_hospital_df = pd.read_csv(canadian_hospital_file_path, encoding='latin1')

# Rename Canadian hospital columns to align with US dataset
canadian_hospital_df.rename(columns={
    'province territory': 'State',
    'Latitude': 'lat',
    'Longitude': 'lng',
    'hospital name': 'Hospital Name',
    'type of hospital*': 'Hospital Type',
    'teaching status': 'Teaching Status',
    'other acute': 'Emergency Services'
}, inplace=True)

# Add a column to distinguish Canadian hospitals
canadian_hospital_df['Country'] = 'Canada'

# Filter for relevant provinces in Canada (bordering New York)
relevant_provinces = ['Ontario', 'Quebec', 'New Brunswick']
canadian_hospital_df = canadian_hospital_df[canadian_hospital_df['State'].isin(relevant_provinces)]

# Fill missing Emergency Services data with 'No' for consistency
canadian_hospital_df['Emergency Services'] = canadian_hospital_df['Emergency Services'].fillna('No')

# Add a column to distinguish US hospitals
us_hospital_df['Country'] = 'USA'

# Merge US and Canadian hospitals
hospital_df = pd.concat([us_hospital_df, canadian_hospital_df], ignore_index=True)

# Filter for relevant states and provinces (New York and surroundings)
relevant_states = ['NY', 'CT', 'NJ', 'PA', 'VT', 'Ontario', 'Quebec', 'New Brunswick']
relevant_hospitals = hospital_df[hospital_df['State'].isin(relevant_states)]

# Filter for hospitals with emergency services
emergency_hospitals = relevant_hospitals[relevant_hospitals['Emergency Services'] == 'Yes']

# Separate New York hospitals from others
ny_hospitals = emergency_hospitals[emergency_hospitals['State'] == 'NY']

# Calculate top 10 isolated hospitals based on the furthest distance to the nearest neighbor
def calculate_min_distances(hospitals):
    distances = []
    for i, hospital1 in hospitals.iterrows():
        hospital1_coords = (hospital1['lat'], hospital1['lng'])
        min_distance = float('inf')
        for j, hospital2 in hospitals.iterrows():
            if i == j:
                continue
            hospital2_coords = (hospital2['lat'], hospital2['lng'])
            distance = geodesic(hospital1_coords, hospital2_coords).miles
            if distance < min_distance:
                min_distance = distance
        distances.append((hospital1['Hospital Name'], hospital1['lat'], hospital1['lng'], min_distance))
    return sorted(distances, key=lambda x: x[3], reverse=True)

isolated_hospitals = calculate_min_distances(ny_hospitals)[:10]

# Assign non-overlapping radii for isolated hospitals
def assign_non_overlapping_radii(hospitals):
    radii = []
    for i, hospital in enumerate(hospitals):
        min_radius = hospital[3] / 2  # Half the distance to the nearest neighbor
        radii.append((hospital[0], hospital[1], hospital[2], min_radius))
    return radii

hospital_radii = assign_non_overlapping_radii(isolated_hospitals)

# Create a map centered around New York
ny_map = folium.Map(location=[40.7128, -74.0060], zoom_start=6)

# Add hospital markers and non-overlapping coverage areas
for hospital in hospital_radii:
    hospital_name, lat, lng, radius = hospital
    # Add hospital marker
    folium.Marker(
        location=[lat, lng],
        popup=f"{hospital_name} - Coverage Radius: {radius:.2f} miles",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(ny_map)

    # Add circular coverage area
    folium.Circle(
        location=[lat, lng],
        radius=radius * 1609.34,  # Convert miles to meters for Folium
        color='red',
        fill=True,
        fill_opacity=0.4
    ).add_to(ny_map)

# Save the map to an HTML file
ny_map.save('isolated_hospital_coverage.html')

# Display the map (optional in notebook environments)
ny_map